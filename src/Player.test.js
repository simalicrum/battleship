import Gameboard from "./Gameboard";
import Ship from "./Ship";
import Player from "./Player";

test("'Not all sunk' player gameboard works as a gameboard", () => {
  let player = Player(Gameboard());
  player.gameboard.placeShip(Ship(3), 5, 5, 0, 1);
  player.gameboard.placeShip(Ship(5), 0, 0, 1, 0);
  player.gameboard.placeShip(Ship(2), 8, 2, 0, 1);
  player.gameboard.placeShip(Ship(3), 2, 6, 1, 0);
  player.gameboard.placeShip(Ship(4), 8, 6, 0, 1);
  player.gameboard.receiveAttack(5, 5);
  player.gameboard.receiveAttack(5, 6);
  player.gameboard.receiveAttack(5, 7);
  player.gameboard.receiveAttack(0, 0);
  player.gameboard.receiveAttack(1, 0);
  player.gameboard.receiveAttack(2, 0);
  player.gameboard.receiveAttack(3, 0);
  player.gameboard.receiveAttack(8, 2);
  player.gameboard.receiveAttack(2, 2);
  player.gameboard.receiveAttack(2, 4);
  player.gameboard.receiveAttack(8, 4);
  player.gameboard.receiveAttack(8, 5);
  player.gameboard.receiveAttack(8, 6);
  player.gameboard.receiveAttack(4, 9);
  player.gameboard.receiveAttack(5, 9);
  player.gameboard.receiveAttack(2, 8);
  expect(player.gameboard.allShipsSunk()).toBe(false);
});

test("'All ships are sunk' on a player gameboard works as a gameboard", () => {
  let player = Player(Gameboard());
  player.gameboard.placeShip(Ship(2), 8, 2, 1, 0);
  player.gameboard.placeShip(Ship(3), 5, 5, 0, 1);
  player.gameboard.placeShip(Ship(3), 2, 6, 0, 1);
  player.gameboard.placeShip(Ship(4), 8, 6, 0, 1);
  player.gameboard.placeShip(Ship(5), 0, 0, 1, 0);
  player.gameboard.receiveAttack(5, 5);
  player.gameboard.receiveAttack(5, 6);
  player.gameboard.receiveAttack(5, 7);
  player.gameboard.receiveAttack(0, 0);
  player.gameboard.receiveAttack(1, 0);
  player.gameboard.receiveAttack(2, 0);
  player.gameboard.receiveAttack(3, 0);
  player.gameboard.receiveAttack(4, 0);
  player.gameboard.receiveAttack(8, 2);
  player.gameboard.receiveAttack(2, 2);
  player.gameboard.receiveAttack(2, 4);
  player.gameboard.receiveAttack(8, 4);
  player.gameboard.receiveAttack(8, 5);
  player.gameboard.receiveAttack(8, 6);
  player.gameboard.receiveAttack(4, 9);
  player.gameboard.receiveAttack(5, 9);
  player.gameboard.receiveAttack(2, 8);
  player.gameboard.receiveAttack(9, 2);
  player.gameboard.receiveAttack(2, 6);
  player.gameboard.receiveAttack(2, 7);
  player.gameboard.receiveAttack(8, 7);
  player.gameboard.receiveAttack(8, 8);
  player.gameboard.receiveAttack(8, 9);
  expect(player.gameboard.allShipsSunk()).toBe(true);
});

test("'Not all sunk' player gameboard works as a gameboard", () => {
  let player = Player(Gameboard());
  player.gameboard.placeShip(Ship(3), 5, 5, 0, 1);
  player.gameboard.placeShip(Ship(5), 0, 0, 1, 0);
  player.gameboard.placeShip(Ship(2), 8, 2, 0, 1);
  player.gameboard.placeShip(Ship(3), 2, 6, 1, 0);
  player.gameboard.placeShip(Ship(4), 8, 6, 0, 1);
  player.gameboard.receiveAttack(5, 5);
  player.gameboard.receiveAttack(5, 6);
  player.gameboard.receiveAttack(5, 7);
  player.gameboard.receiveAttack(0, 0);
  player.gameboard.receiveAttack(1, 0);
  player.gameboard.receiveAttack(2, 0);
  player.gameboard.receiveAttack(3, 0);
  player.gameboard.receiveAttack(8, 2);
  player.gameboard.receiveAttack(2, 2);
  player.gameboard.receiveAttack(2, 4);
  player.gameboard.receiveAttack(8, 4);
  player.gameboard.receiveAttack(8, 5);
  player.gameboard.receiveAttack(8, 6);
  player.gameboard.receiveAttack(4, 9);
  player.gameboard.receiveAttack(5, 9);
  player.gameboard.receiveAttack(2, 8);
  expect(player.gameboard.allShipsSunk()).toBe(false);
});

test("player can take turns against enemy, enemy player will report a miss as false", () => {
  let player = Player(Gameboard());
  let enemy = Player(Gameboard());
  enemy.gameboard.placeShip(Ship(3), 5, 5, 0, 1);
  enemy.gameboard.placeShip(Ship(5), 0, 0, 1, 0);
  enemy.gameboard.placeShip(Ship(2), 8, 2, 0, 1);
  enemy.gameboard.placeShip(Ship(3), 2, 6, 1, 0);
  enemy.gameboard.placeShip(Ship(4), 8, 6, 0, 1);
  enemy.gameboard.receiveAttack(5, 5);
  enemy.gameboard.receiveAttack(5, 6);
  enemy.gameboard.receiveAttack(5, 7);
  enemy.gameboard.receiveAttack(0, 0);
  enemy.gameboard.receiveAttack(1, 0);
  enemy.gameboard.receiveAttack(2, 0);
  enemy.gameboard.receiveAttack(3, 0);
  enemy.gameboard.receiveAttack(8, 2);
  enemy.gameboard.receiveAttack(2, 2);
  enemy.gameboard.receiveAttack(2, 4);
  enemy.gameboard.receiveAttack(8, 4);
  enemy.gameboard.receiveAttack(8, 5);
  enemy.gameboard.receiveAttack(8, 6);
  enemy.gameboard.receiveAttack(4, 9);
  enemy.gameboard.receiveAttack(5, 9);
  enemy.gameboard.receiveAttack(2, 8);
  expect(player.takeTurn(enemy.gameboard, 5, 2)).toBe(false);
});

test("player can take turns against enemy, enemy player will report a hit as true", () => {
  let player = Player(Gameboard());
  let enemy = Player(Gameboard());
  enemy.gameboard.placeShip(Ship(3), 5, 5, 0, 1);
  enemy.gameboard.placeShip(Ship(5), 0, 0, 1, 0);
  enemy.gameboard.placeShip(Ship(2), 8, 2, 0, 1);
  enemy.gameboard.placeShip(Ship(3), 2, 6, 1, 0);
  enemy.gameboard.placeShip(Ship(4), 8, 6, 0, 1);
  enemy.gameboard.receiveAttack(5, 5);
  enemy.gameboard.receiveAttack(5, 6);
  enemy.gameboard.receiveAttack(5, 7);
  enemy.gameboard.receiveAttack(0, 0);
  enemy.gameboard.receiveAttack(1, 0);
  enemy.gameboard.receiveAttack(2, 0);
  enemy.gameboard.receiveAttack(3, 0);
  enemy.gameboard.receiveAttack(8, 2);
  enemy.gameboard.receiveAttack(2, 2);
  enemy.gameboard.receiveAttack(2, 4);
  enemy.gameboard.receiveAttack(8, 4);
  enemy.gameboard.receiveAttack(8, 5);
  enemy.gameboard.receiveAttack(8, 6);
  enemy.gameboard.receiveAttack(4, 9);
  enemy.gameboard.receiveAttack(5, 9);
  enemy.gameboard.receiveAttack(2, 8);
  expect(player.takeTurn(enemy.gameboard, 0, 0)).toBe(true);
});
